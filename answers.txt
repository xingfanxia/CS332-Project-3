CS 332 Project 3 Answers
Xingfan Xia and Kiet Tran
---------------------

Problem 1
----------

1: 66.6 s
2: 36.9 s
4: 34.8 s

As the number of CPUs increases, the total execution time does not decrease in a linear fashion.This is because our simulated computer does not often need to run more than two threads in parallel. 
With more than 2 CPUs, much of the CPU time is spend idle waiting for a thread to run. The extra CPUs would be used more efficiently with more processes running or more multithreaded programs running.


Problem 2
----------

800:
# of Context Switches: 136
Total execution time: 67.9 s
Total time spent in READY state: 327.4 s

600:
# of Context Switches: 161
Total execution time: 65.6 s
Total time spent in READY state: 319.5 s

400:
# of Context Switches: 203
Total execution time: 63.6 s
Total time spent in READY state: 298.8 s

200:
# of Context Switches: 362
Total execution time: 67.9 s
Total time spent in READY state: 285.2 s

In our simulation, the waiting time decreased at a linear rate as the length of the time slice decreased. The execution time stayed the same but the number of context switches greatly increased. This is not always a good thing because the processor will incur many more cache misses as it gains affinity for a new process. Also switching will be slower on slower CPUs. There is also an extra context switching overhead in the round robin algorithm.


Problem 3
----------

FIFO:
# of Context Switches: 99
Total execution time: 67.6 s
Total time spent in READY state: 389.9 s

Round Robin:
# of Context Switches: 203
Total execution time: 67.6 s
Total time spent in READY state: 299.9 s

Priority:
# of Context Switches: 169
Total execution time: 68.4 s
Total time spent in READY state: 150.7 s

The algorithm with the closest approximation of SJF (lowest waiting time) is the priority scheduling algorithm. Since SJF is actually just a priority algorithm. It is SJF with execution time determining the priority level, this probably means that the priorities of the processes in our simulation are near the SJF priority L = 1 / CPU_burst_time. This may not be always be the case however, since priority levels are not always set by (estimated) execution time or may be set incorrectly.
